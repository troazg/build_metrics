<h4>Historical Test Results</h4>
<p><a href="../">&lt;- Back</a></p>

<div class="row">
  <div class="chart-container col-sm">
    <canvas id="timeChartElement"></canvas>
  </div>
  <div class="chat-container col-sm">
    <canvas id="resultChartElement"></canvas>
  </div>
</div>

<hr />

<table class="table">
  <tr class="table">
    <th scope="col">Recent Errors</th>
  </tr>
  {{#each results}}
    {{#each expections}}
      <tr>
        <td>{{this}}</td>
      </tr>
    {{/each}}
  {{/each}}
</table>



<script type="text/javascript">
  var data = decodeURIComponent("{{{results_data}}}");
  var testData = JSON.parse(data);

  last30 = testData.slice(-30).reverse();
  var timeData = [];
  last30.forEach(e => {
    timeData.push(e.runtime)
  })

  dateLabels = [];
  var today = new Date();
  for (var i = 0; i < 14; i++) {
    var date = new Date();
    date.setDate(today.getDate() - i);
    dateLabels.push(date.toLocaleDateString("en-US", {timeZone: "America/Denver"}));
  }
  dateLabels.reverse();

  var passDataSet = [0,0,0,0,0,0,0,0,0,0,0,0,0,0];
  var failDataSet = [0,0,0,0,0,0,0,0,0,0,0,0,0,0];

  var bucketDate = new Date();
  bucketDate.setDate(today.getDate());
  var resultsArrayIndex = 0;
  testData.forEach(e => {
    var resultDate = new Date(e.timestamp);

    resultsArrayIndex = assignToBucket(resultDate, bucketDate, e.passed, resultsArrayIndex, passDataSet, failDataSet);
  })

  failDataSet.reverse();
  passDataSet.reverse();

  var timeChartElement = document.getElementById("timeChartElement").getContext('2d');
  var timeChart = new Chart(timeChartElement, {
      type: 'line',
      data: {
        labels: timeData,
        datasets: [{
          borderColor: "#3E95CD",
          fill: false,
          data: timeData
        }]
      },
      options: {
        legend: {
          display: false
        },
        title: {
          display: true,
          fontSize: 18,
          text: "Test Run Time"
        },
        scales: {
          xAxes: [{
            ticks: {
              display: false,
              maxTicksLimit: 2
            }
          }]
        }
      }
  });

  var resultChartElement = document.getElementById("resultChartElement");
  var resultsChart = new Chart(resultChartElement, {
    type: 'bar',
    data: {
      labels: dateLabels,
      datasets: [
      {
        label: "Pass",
        data: passDataSet,
        backgroundColor: '#D6E9C6'
      },
      {
        label: "Fail",
        data: failDataSet,
        backgroundColor: "#EBCCD1"
      }
      ]
    },
    options: {
      title: {
        display: true,
        fontSize: 18,
        text: "Test Results"
      },
      scales: {
        xAxes: [{ stacked: true }],
        yAxes: [{
          stacked: true,
          ticks: {
            min: 0,
            stepSize: 1,
            autoSkip: false
          }
        }]
      }
    }
  });

  function areSameDate(d1, d2) {
    return d1.toLocaleDateString("en-US", {timeZone: "America/Denver"}) == d2.toLocaleDateString("en-US", {timeZone: "America/Denver"});
  }

  function assignToBucket(date, bucketDate, result, bucketIndex, passBucket, failBucket) {
    if (bucketIndex >= 14)
      return bucketIndex

    if (areSameDate(date, bucketDate)) {
      if (result) {
        passBucket[bucketIndex]++;
      } else {
        failDataSet[bucketIndex]++;
      }
    } else {
      bucketIndex++;
      bucketDate.setDate(bucketDate.getDate() - 1);
      assignToBucket(date, bucketDate, result, bucketIndex, passBucket, failBucket);
    }

    return bucketIndex;
  }

</script>


